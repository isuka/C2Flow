
// return, exitでフローが切れる
func1 {
    if (cond1) {
        nop1
        return
    } else if (cond2) {
        nop2
        exit
    }

    nop3
}

func2 {
    switch (cond1) {
    case fuga
        nop1
        return
    case piyo
        nop2
        break
    default
        nop3
        exit 1
    }
    return 0
}

func3 {
    while (cond1) {
        return
    }
    nop1
}

func4 {
    exit 1
}

// if文の下に処理が継続する時
func5 {
    if (cond1) {
        nop1
    }
    
    nop2
}

func6 {
    if (cond1) {
        nop1
    }
    
    if (cond2) {
        nop2
    }
    
    nop3
}

func7 {
    if (cond1) {
        nop1
    } else if (cond2) {
        nop2
    }

    nop3
    
    if (cond4) {
        nop4
    } else if (cond5) {
        nop5
    } else {
        nop6
    }

    nop7
}

// case文が2つ重なるとdefaultの接続先がnop2になってしまう。
func8 {

    nop

    switch (cond1) {
    case foo1
    case foo2
        nop2
        break
    default
        nop3
        return 3
    }

    return 0
}

func9 {

    nop

    switch (cond1) {
    case foo1
    case foo2
        nop2
        break
    case foo3
    default
        nop4
        return 4
    }

    return 0
}

// 同一種類の解析のネスト
func10 while nest
{
    while (condition1) {
        nop1
        while (condition11) {
            nop11
            nop12
        }
        nop2
    }
}

func11 until nest
{
    until (condition1) {
        nop1
        until (condition10) {
            nop11
            nop12
        }
        nop2
    }
}

func12 do nest
{
    do {
        nop1
        do {
            nop11
            nop12
        } while (condition10)
        nop2
    } while (condition1)
}

func13 for nest
{
    for (condition1) {
        nop1
        for (condition10) {
            nop11
            nop12
        }
        nop2
    }
}

func14-1 switch nest
{
    switch (condition1) {
    case fuga
        switch (condition10) {
        case fuga10
            nop11
            break
        case piyo10
            nop12
        default
            nop13
        }
        nop1
        break
    case piyo
        nop2
    default
        nop3
    }
}

func14-2 switch nest
{
    switch (condition1) {
    case fuga
        nop1
        switch (condition10) {
        case fuga10
            nop11
            break
        case piyo10
            nop12
        default
            nop13
        }
        break
    case piyo
        nop2
    default
        nop3
    }
}

func15 if nest
{
    if (condition1) {
        nop1
        if (condition10) {
            nop10
            nop11
        } else if (condition11) {
            nop12
            nop13
        } else {
            nop14
            nop15
        }
        nop2
    } else if (condition2) {
        nop3
        nop4
    } else {
        nop5
        nop6
    }
}

// switchでcaseのあとbreakだけのケース
func16-1 switch case only 1
{
    switch (condition1) {
    case fuga
        break
    case piyo
    default
        break
    }
}

func16-2 switch case only 2
{
    switch (condition1) {
    case fuga
    case piyo
        break
    default
        break
    }
    nop1
}

func16-3 switch case only 3
{
    switch (condition1) {
    case fuga
    case piyo
        break
    default
        nop1
        break
    }
    nop2
}

// whileの中にifがあり、その中でbreakするとwhileがbreakされる
func17-1 while break from if
{
    nop1
    while (cond1) {
        nop2
        if (cond2) {
            nop3
            break
        }
        nop4
    }
    nop5
}

// untilの中にifがあり、その中でbreakするとwhileがbreakされる
func17-2 until break from if
{
    nop1
    until (cond1) {
        nop2
        if (cond2) {
            nop3
            break
        }
        nop4
    }
    nop5
}

// doの中にifがあり、その中でbreakするとwhileがbreakされる
func17-3 do break from if
{
    nop1
    do {
        nop2
        if (cond2) {
            nop3
            break
        }
        nop4
    } while (cond1)
    nop5
}

// forの中にifがあり、その中でbreakするとwhileがbreakされる
func17-4 for break from if
{
    nop1
    for (cond1) {
        nop2
        if (cond2) {
            nop3
            break
        }
        nop4
    }
    nop5
}

// 関数名に引数のカッコがあるとsubgraphが表示されない
// func9 () {
//     nop
// }

// C言語の配列定義をブロックステートと勘違いしてしまう
// func8 ()
// {
//     uint32_t buf[] = {head, body}
//     return
// }
